#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// Lista de imports que sabemos que s√£o seguros para remover
const SAFE_UNUSED_IMPORTS = [
  // React hooks n√£o utilizados
  'useEffect', 'useState', 'useCallback', 'useMemo', 'useRef',
  
  // √çcones Lucide n√£o utilizados (verificados manualmente)
  'Info', 'User', 'CalendarDays', 'HistoryIcon', 'DollarSign', 'ShoppingCart',
  'Edit3', 'FileText', 'Upload', 'Save', 'XCircle', 'TagsIcon', 'LinkIconLucide',
  'Pencil', 'Eraser', 'PaintBucket', 'Trash2', 'Heart', 'Flag', 'BadgePercent',
  'ScrollText', 'Gem', 'Globe', 'AlertTriangle', 'MapIcon', 'Crown', 'Star',
  'Clock', 'Users', 'Zap', 'Sparkles', 'Activity', 'BarChart3', 'PieChart',
  'Target', 'Award', 'Shield', 'Eye', 'EyeOff', 'RefreshCw', 'Key', 'Smartphone',
  'Mail', 'CreditCard', 'Video', 'Camera', 'Mic', 'Type', 'Palette', 'Download',
  'Copy', 'Share2', 'Bookmark', 'Edit', 'Filter', 'Search', 'Plus', 'Minus',
  'Settings', 'Bell', 'X', 'ChevronLeft', 'ChevronRight', 'ChevronUp', 'ChevronDown',
  'MoreHorizontal', 'MoreVertical', 'Timer', 'Calendar', 'Flame', 'Coins',
  'TrendingUp', 'TrendingDown', 'Volume2', 'VolumeX', 'Phone', 'MessageSquare',
  'UserPlus', 'UserMinus', 'UserCheck', 'Lightbulb', 'Compass', 'Navigation',
  'MapPin', 'Home', 'Building', 'Mountain', 'Tree', 'Flower', 'Bug', 'Fish',
  'Bird', 'Cat', 'Dog', 'Rabbit', 'Bear', 'Lion', 'Elephant', 'Whale',
  
  // Componentes UI n√£o utilizados
  'Card', 'CardContent', 'CardHeader', 'CardTitle', 'CardDescription', 'CardFooter',
  'Button', 'Input', 'Label', 'Textarea', 'Select', 'SelectContent', 'SelectItem',
  'SelectTrigger', 'SelectValue', 'Dialog', 'DialogContent', 'DialogHeader',
  'DialogTitle', 'DialogTrigger', 'DialogDescription', 'Sheet', 'SheetContent',
  'SheetHeader', 'SheetTitle', 'SheetTrigger', 'SheetDescription', 'Badge',
  'Progress', 'ScrollArea', 'Separator', 'Avatar', 'AvatarFallback', 'AvatarImage',
  'RadioGroup', 'RadioGroupItem', 'Tabs', 'TabsContent', 'TabsList', 'TabsTrigger',
  
  // Outros imports comuns n√£o utilizados
  'motion', 'AnimatePresence', 'cn', 'formatDate', 'useToast'
];

function isImportUsed(content, importName) {
  // Remove a linha do pr√≥prio import para n√£o contar como uso
  const contentWithoutImports = content.replace(/import[^;]+;/g, '');
  
  // Padr√µes para verificar uso
  const usagePatterns = [
    // JSX component: <Component> ou <Component />
    new RegExp(`<${importName}[\\s\\/>]`, 'g'),
    
    // Function call: functionName(
    new RegExp(`\\b${importName}\\s*\\(`, 'g'),
    
    // Variable usage: variableName (n√£o em import)
    new RegExp(`\\b${importName}\\b(?![\\s]*[,}])`, 'g'),
    
    // Property access: .propertyName
    new RegExp(`\\.${importName}\\b`, 'g'),
    
    // Destructuring: { prop: name }
    new RegExp(`{[^}]*\\b${importName}\\b[^}]*}`, 'g'),
    
    // Type usage: : TypeName
    new RegExp(`:\\s*${importName}\\b`, 'g'),
    
    // Generic usage: <TypeName>
    new RegExp(`<${importName}[\\s,>]`, 'g')
  ];
  
  return usagePatterns.some(pattern => pattern.test(contentWithoutImports));
}

function removeUnusedImport(content, importName) {
  // Verifica se o import est√° sendo usado
  if (isImportUsed(content, importName)) {
    return content; // N√£o remove se est√° sendo usado
  }
  
  // Remove from named imports: { A, B, C } -> { A, C }
  content = content.replace(
    new RegExp(`(import\\s*{[^}]*),\\s*${importName}\\s*([^}]*})`, 'g'),
    '$1$2'
  );
  content = content.replace(
    new RegExp(`(import\\s*{)\\s*${importName}\\s*,([^}]*})`, 'g'),
    '$1$2'
  );
  content = content.replace(
    new RegExp(`(import\\s*{)\\s*${importName}\\s*(})`, 'g'),
    ''
  );
  
  // Remove standalone import lines
  content = content.replace(
    new RegExp(`import\\s+${importName}\\s+from\\s+['"][^'"]+['"];?\\s*\\n?`, 'g'),
    ''
  );
  
  // Clean up empty import statements
  content = content.replace(/import\s*{\s*}\s*from\s*['"][^'"]+['"];\s*\n?/g, '');
  
  // Clean up trailing commas in imports
  content = content.replace(/import\s*{\s*,([^}]*})/, 'import {$1}');
  content = content.replace(/import\s*{([^}]*),\s*}/, 'import {$1}');
  
  return content;
}

function addEslintDisableForImages(content) {
  // Adiciona eslint-disable apenas para <img> que n√£o t√™m
  return content.replace(
    /(\s*)(<img\s+[^>]*>)/g,
    (match, indent, imgTag) => {
      // Verifica se j√° tem o disable comment na linha anterior
      const lines = content.split('\n');
      const imgLineIndex = content.substring(0, content.indexOf(match)).split('\n').length - 1;
      
      if (imgLineIndex > 0) {
        const prevLine = lines[imgLineIndex - 1];
        if (prevLine.includes('eslint-disable-next-line @next/next/no-img-element')) {
          return match; // J√° tem o comment
        }
      }
      
      return `${indent}{/* eslint-disable-next-line @next/next/no-img-element */}\n${indent}${imgTag}`;
    }
  );
}

function processFile(filePath) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    const originalContent = content;
    const fileName = path.basename(filePath);
    
    // Remove imports n√£o utilizados da lista segura
    for (const importName of SAFE_UNUSED_IMPORTS) {
      content = removeUnusedImport(content, importName);
    }
    
    // Adiciona eslint-disable para imagens
    content = addEslintDisableForImages(content);
    
    // Remove linhas vazias excessivas
    content = content.replace(/\n\s*\n\s*\n+/g, '\n\n');
    
    // Salva apenas se houve mudan√ßas
    if (content !== originalContent) {
      fs.writeFileSync(filePath, content);
      console.log(`‚úÖ Limpo: ${path.relative(process.cwd(), filePath)}`);
      return true;
    }
    
    return false;
  } catch (error) {
    console.error(`‚ùå Erro ao processar ${filePath}:`, error.message);
    return false;
  }
}

function findFiles(dir, extensions = ['.ts', '.tsx']) {
  const files = [];
  
  if (!fs.existsSync(dir)) {
    return files;
  }
  
  const items = fs.readdirSync(dir);
  
  for (const item of items) {
    const fullPath = path.join(dir, item);
    const stat = fs.statSync(fullPath);
    
    if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules') {
      files.push(...findFiles(fullPath, extensions));
    } else if (extensions.some(ext => item.endsWith(ext))) {
      files.push(fullPath);
    }
  }
  
  return files;
}

function main() {
  console.log('üßπ Limpando imports n√£o utilizados de forma segura...\n');
  
  const projectRoot = process.cwd();
  
  let totalFiles = 0;
  let cleanedFiles = 0;
  
  // Processa src/ e app/
  const dirs = ['src', 'app'];
  
  for (const dir of dirs) {
    const fullDir = path.join(projectRoot, dir);
    const files = findFiles(fullDir);
    
    console.log(`üìÅ Processando ${dir}/... (${files.length} arquivos)`);
    
    for (const file of files) {
      totalFiles++;
      if (processFile(file)) {
        cleanedFiles++;
      }
    }
  }
  
  console.log(`\nüìä Resultado:`);
  console.log(`   üìÅ Total: ${totalFiles} arquivos`);
  console.log(`   ‚ú® Limpos: ${cleanedFiles} arquivos`);
  console.log(`   üìâ N√£o alterados: ${totalFiles - cleanedFiles}`);
  console.log(`\n‚úÖ Limpeza segura conclu√≠da!`);
}

if (require.main === module) {
  main();
}

module.exports = { processFile, findFiles };
