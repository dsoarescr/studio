generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String
  email          String    @unique
  password       String
  avatar         String?
  image          String?
  emailVerified  DateTime?
  reputation     Int       @default(0)
  isVerified     Boolean   @default(false)
  joinDate       DateTime  @default(now())
  totalSales     Int       @default(0)
  totalPurchases Int       @default(0)
  credits        Float     @default(0)
  
  // Relações
  pixels         Pixel[]
  comments       Comment[]
  ratings        Rating[]
  history        HistoryEvent[]
  favorites      Favorite[]
  followers      Follow[]    @relation("following")
  following      Follow[]    @relation("follower")
  notifications  Notification[]
  bids           Bid[]

  // NextAuth
  accounts       Account[]
  sessions       Session[]

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Pixel {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float
  x           Int
  y           Int
  region      String
  status      String   @default("available") // available, sold, auction
  owner       User     @relation(fields: [ownerId], references: [id])
  ownerId     String

  // Características
  isFeatured  Boolean  @default(false)
  isPromoted  Boolean  @default(false)
  hasAuction  Boolean  @default(false)
  
  // Métricas
  views       Int      @default(0)
  likes       Int      @default(0)
  shares      Int      @default(0)

  // Relações
  comments    Comment[]
  ratings     Rating[]
  history     HistoryEvent[]
  favorites   Favorite[]
  images      Image[]
  auction     Auction?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Comment {
  id                String    @id @default(cuid())
  content           String
  rating            Int?
  likes             Int       @default(0)
  isVerifiedPurchase Boolean  @default(false)
  
  // Relações
  user              User      @relation(fields: [userId], references: [id])
  userId            String
  pixel             Pixel     @relation(fields: [pixelId], references: [id])
  pixelId           String
  parent            Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  parentId          String?
  replies           Comment[] @relation("CommentReplies")
  images            Image[]

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Rating {
  id                String   @id @default(cuid())
  score             Int
  review            String?
  helpfulVotes      Int      @default(0)
  reportCount       Int      @default(0)
  isVerifiedPurchase Boolean @default(false)

  // Relações
  user              User     @relation(fields: [userId], references: [id])
  userId            String
  pixel             Pixel    @relation(fields: [pixelId], references: [id])
  pixelId           String

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model HistoryEvent {
  id        String   @id @default(cuid())
  type      String   // sale, auction_bid, price_change, view, favorite, comment
  data      Json     // Dados específicos do evento
  
  // Relações
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  pixel     Pixel    @relation(fields: [pixelId], references: [id])
  pixelId   String

  createdAt DateTime @default(now())
}

model Auction {
  id            String   @id @default(cuid())
  startPrice    Float
  currentPrice  Float
  minIncrement  Float
  startDate     DateTime
  endDate       DateTime
  status        String   @default("active") // active, ended, cancelled

  // Relações
  pixel         Pixel    @relation(fields: [pixelId], references: [id])
  pixelId       String   @unique
  bids          Bid[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Bid {
  id        String   @id @default(cuid())
  amount    Float
  isAutoBid Boolean  @default(false)
  maxAmount Float?   // Para lances automáticos

  // Relações
  auction   Auction  @relation(fields: [auctionId], references: [id])
  auctionId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  createdAt DateTime @default(now())
}

model Image {
  id        String   @id @default(cuid())
  url       String
  type      String   // original, thumbnail, preview
  
  // Relações
  pixel     Pixel?   @relation(fields: [pixelId], references: [id])
  pixelId   String?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?

  createdAt DateTime @default(now())
}

model Favorite {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  pixel     Pixel    @relation(fields: [pixelId], references: [id])
  pixelId   String
  createdAt DateTime @default(now())

  @@id([userId, pixelId])
}

model Follow {
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@id([followerId, followingId])
}

model Notification {
  id        String   @id @default(cuid())
  type      String   // comment, bid, price_change, follow, etc.
  content   String
  read      Boolean  @default(false)
  
  // Relações
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  createdAt DateTime @default(now())
}

// NextAuth models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
