import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import PixelGrid from '@/components/pixel-grid/PixelGrid';
import { useUserStore, usePixelStore, useAppStore, useSettingsStore } from '@/lib/store';

// Mock the stores
jest.mock('@/lib/store', () => ({
  useUserStore: jest.fn(),
  usePixelStore: jest.fn(),
  useAppStore: jest.fn(),
  useSettingsStore: jest.fn(),
}));

// Mock do contexto de autenticação para evitar erro do hook durante os testes
jest.mock('@/lib/auth-context', () => ({
  useAuth: () => ({
    user: null,
    loading: false,
    signIn: jest.fn(),
    signUp: jest.fn(),
    logOut: jest.fn(),
    signInWithGoogle: jest.fn(),
    signInWithFacebook: jest.fn(),
    signInWithTwitter: jest.fn(),
    signInWithGithub: jest.fn(),
    resetPassword: jest.fn(),
    updateUserProfile: jest.fn(),
  }),
}));

// Mock the AI function - temporarily disabled
// jest.mock('@/ai/flows/generate-pixel-description', () => ({
//   generatePixelDescription: jest.fn().mockResolvedValue({
//     description: 'This is a test description generated by AI.'
//   }),
// }));

describe('PixelGrid Component', () => {
  beforeEach(() => {
    // Setup default mock implementations
    (useUserStore as jest.Mock).mockReturnValue({
      addCredits: jest.fn(),
      addXp: jest.fn(),
      addPixel: jest.fn(),
    });
    
    (usePixelStore as jest.Mock).mockReturnValue({
      soldPixels: [],
      addSoldPixel: jest.fn(),
      updatePixelColor: jest.fn(),
      loadSoldPixels: jest.fn().mockReturnValue([]),
    });

    (useAppStore as jest.Mock).mockReturnValue({
      isOnline: true,
    });

    (useSettingsStore as jest.Mock).mockReturnValue({
      soundEffects: false,
    });
    
    // Mock canvas methods
    HTMLCanvasElement.prototype.getContext = jest.fn(() => ({
      clearRect: jest.fn(),
      fillRect: jest.fn(),
      drawImage: jest.fn(),
      getImageData: jest.fn(() => ({
        data: new Uint8ClampedArray(4),
      })),
      putImageData: jest.fn(),
      save: jest.fn(),
      restore: jest.fn(),
      translate: jest.fn(),
      scale: jest.fn(),
      stroke: jest.fn(),
      strokeRect: jest.fn(),
    }));
  });
  
  it('renders loading state initially', () => {
    render(<PixelGrid />);
    expect(screen.getByText(/Carregando mapa.../i)).toBeInTheDocument();
  });
  
  it('renders zoom controls', async () => {
    jest.useFakeTimers();
    render(<PixelGrid />);
    // Avançar timers simulados para concluir os timeouts do loading
    jest.advanceTimersByTime(1100);
    await waitFor(() => {
      const plusBtn = screen.getByText('+');
      const minusBtn = screen.getByText('-');
      const resetBtn = screen.getByText('Reset');
      expect(plusBtn).toBeInTheDocument();
      expect(minusBtn).toBeInTheDocument();
      expect(resetBtn).toBeInTheDocument();
    });
    jest.useRealTimers();
  });
  
  it('handles zoom in button click', async () => {
    jest.useFakeTimers();
    render(<PixelGrid />);
    jest.advanceTimersByTime(1100);
    await waitFor(() => {
      const zoomInButton = screen.getByText('+');
      fireEvent.click(zoomInButton);
      expect(zoomInButton).toBeInTheDocument();
    });
    jest.useRealTimers();
  });
  
  it('handles zoom out button click', async () => {
    jest.useFakeTimers();
    render(<PixelGrid />);
    jest.advanceTimersByTime(1100);
    await waitFor(() => {
      const zoomOutButton = screen.getByText('-');
      fireEvent.click(zoomOutButton);
      expect(zoomOutButton).toBeInTheDocument();
    });
    jest.useRealTimers();
  });
  
  it('handles reset view button click', async () => {
    jest.useFakeTimers();
    render(<PixelGrid />);
    jest.advanceTimersByTime(1100);
    await waitFor(() => {
      const resetButton = screen.getByText('Reset');
      fireEvent.click(resetButton);
      expect(resetButton).toBeInTheDocument();
    });
    jest.useRealTimers();
  });
  
  // More tests would be added for:
  // - Pixel selection
  // - Map navigation
  // - Pixel purchase
  // - AI description generation
  // - Performance mode toggling
});
